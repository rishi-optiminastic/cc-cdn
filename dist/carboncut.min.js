var CarbonCut=function(){"use strict";function e(){if("undefined"==typeof window)return null;return new URLSearchParams(window.location.search).get("cc_tracker")}class t{constructor(){this.defaults={trackerToken:null,apiUrl:"http://127.0.0.1:8000/api/v1/events/",sessionId:null,pingInterval:15e3,debug:!1,autoTrack:!0,respectDoNotTrack:!0,maxRetries:3,retryDelay:1e3,domain:null},this.config={...this.defaults}}init(t={}){return this.config={...this.defaults,...t,trackerToken:t.trackerToken||e()},this.validate()}validate(){return this.config.trackerToken?!!this.config.apiUrl||(console.error("CarbonCut: API URL is required"),!1):(console.error('CarbonCut: No tracker token provided. Add data-token="YOUR_TOKEN" to script tag.'),!1)}get(e){return this.config[e]}set(e,t){this.config[e]=t}getAll(){return{...this.config}}}class i{constructor(){this.state={isInitialized:!1,timeSpent:0,lastPath:null,retryCount:0}}get(e){return this.state[e]}set(e,t){this.state[e]=t}incrementTimeSpent(e){this.state.timeSpent+=e}reset(){this.state={isInitialized:!1,timeSpent:0,lastPath:null,retryCount:0}}getAll(){return{...this.state}}}class n{constructor(e,t){this.config=e,this.logger=t,this.sessionId=null}start(){return this.sessionId="undefined"!=typeof crypto&&crypto.randomUUID?crypto.randomUUID():"xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx".replace(/[xy]/g,function(e){const t=16*Math.random()|0;return("x"===e?t:3&t|8).toString(16)}),this.config.set("sessionId",this.sessionId),"undefined"!=typeof window&&(window.__CC_SESSION_ID=this.sessionId,window.__CC_TRACKER_TOKEN=this.config.get("trackerToken")),this.logger.log("Session started:",this.sessionId),this.sessionId}getId(){return this.sessionId}end(){this.logger.log("Session ended:",this.sessionId),this.sessionId=null,this.config.set("sessionId",null)}isActive(){return null!==this.sessionId}}class s{constructor(e=!1){this.debug=e,this.prefix="CarbonCut:"}setDebug(e){this.debug=e}log(...e){this.debug&&console.log(this.prefix,...e)}warn(...e){this.debug&&console.warn(this.prefix,...e)}error(...e){console.error(this.prefix,...e)}info(...e){this.debug&&console.info(this.prefix,...e)}}class r{constructor(e,t){this.config=e,this.logger=t,this.queue=[],this.isOnline="undefined"==typeof navigator||navigator.onLine,"undefined"!=typeof window&&this.setupOnlineListener()}setupOnlineListener(){window.addEventListener("online",()=>{this.isOnline=!0,this.logger.log("Connection restored, flushing queue"),this.flushQueue()}),window.addEventListener("offline",()=>{this.isOnline=!1,this.logger.warn("Connection lost, events will be queued")})}async send(e){if(!this.isOnline)return this.logger.warn("Offline, queueing event"),this.queue.push(e),!1;const t=this.config.get("apiUrl");try{if(this.shouldUseSendBeacon(e.event)){if(this.sendViaBeacon(t,e))return this.logger.log("Event sent via sendBeacon:",e.event),!0}return await this.sendViaFetch(t,e),this.logger.log("Event sent via fetch:",e.event),!0}catch(t){return this.logger.error("Failed to send event:",t),this.queue.push(e),!1}}sendViaBeacon(e,t){if("undefined"==typeof navigator||!navigator.sendBeacon)return!1;try{const i=new Blob([JSON.stringify(t)],{type:"application/json"});return navigator.sendBeacon(e,i)}catch(e){return this.logger.error("sendBeacon failed:",e),!1}}async sendViaFetch(e,t){this.logger.log("Sending via fetch to:",e,t);const i=await fetch(e,{method:"POST",headers:{"Content-Type":"application/json","X-Tracker-Token":this.config.get("trackerToken")},body:JSON.stringify(t),keepalive:!0});if(!i.ok)throw new Error(`HTTP error! status: ${i.status}`);return i}shouldUseSendBeacon(e){return["session_end","page_unload"].includes(e)}async flushQueue(){if(0===this.queue.length)return;this.logger.log(`Flushing ${this.queue.length} queued events`);const e=[...this.queue];this.queue=[];for(const t of e){await this.send(t)||this.queue.push(t)}}getQueueSize(){return this.queue.length}}class o{constructor(e,t){this.config=e,this.logger=t,this.worker=null,this.isSupported=this.checkWorkerSupport(),this.queueSize=0,this.isSupported?this.initWorker():this.logger.warn("Web Workers not supported, falling back to main thread")}checkWorkerSupport(){return"undefined"!=typeof Worker}initWorker(){try{const e=this.getWorkerCode(),t=new Blob([e],{type:"application/javascript"}),i=URL.createObjectURL(t);this.worker=new Worker(i),this.worker.addEventListener("message",e=>{this.handleWorkerMessage(e.data)}),this.worker.addEventListener("error",e=>{this.logger.error("Worker error:",e)}),this.worker.postMessage({type:"INIT",payload:{apiUrl:this.config.get("apiUrl"),trackerToken:this.config.get("trackerToken"),batchSize:10,batchInterval:5e3}}),this.setupOnlineListener(),this.logger.log("Web Worker initialized for event processing")}catch(e){this.logger.error("Failed to initialize worker:",e),this.worker=null}}getWorkerCode(){return"\n      let config = null;\n      let eventQueue = [];\n      let flushTimer = null;\n      let isOnline = true;\n\n      self.addEventListener('message', async (event) => {\n        const { type, payload } = event.data;\n\n        switch (type) {\n          case 'INIT':\n            config = payload;\n            if (config.batchInterval) {\n              flushTimer = setInterval(() => {\n                if (eventQueue.length > 0) {\n                  flushQueue();\n                }\n              }, config.batchInterval);\n            }\n            self.postMessage({ type: 'INIT_SUCCESS' });\n            break;\n          \n          case 'TRACK_EVENT':\n            eventQueue.push({ ...payload, queuedAt: Date.now() });\n            if (eventQueue.length >= (config.batchSize || 10)) {\n              flushQueue();\n            }\n            break;\n          \n          case 'FLUSH_QUEUE':\n            await flushQueue();\n            break;\n          \n          case 'ONLINE':\n            isOnline = true;\n            await flushQueue();\n            break;\n          \n          case 'OFFLINE':\n            isOnline = false;\n            break;\n          \n          case 'GET_QUEUE_SIZE':\n            self.postMessage({ type: 'QUEUE_SIZE', size: eventQueue.length });\n            break;\n        }\n      });\n\n      async function flushQueue() {\n        if (eventQueue.length === 0 || !isOnline) return;\n        \n        const batch = [...eventQueue];\n        eventQueue = [];\n        \n        try {\n          const response = await fetch(config.apiUrl, {\n            method: 'POST',\n            headers: {\n              'Content-Type': 'application/json',\n              'X-Tracker-Token': config.trackerToken\n            },\n            body: JSON.stringify({ events: batch, batch: true }),\n            keepalive: true\n          });\n          \n          if (!response.ok) throw new Error(`HTTP ${response.status}`);\n          \n          self.postMessage({ type: 'FLUSH_SUCCESS', count: batch.length });\n        } catch (error) {\n          eventQueue.push(...batch);\n          self.postMessage({ type: 'FLUSH_ERROR', error: error.message, count: batch.length });\n        }\n      }\n    "}handleWorkerMessage(e){const{type:t,count:i,error:n,size:s}=e;switch(t){case"INIT_SUCCESS":this.logger.log("Worker ready");break;case"FLUSH_SUCCESS":this.logger.log(`Worker flushed ${i} events`);break;case"FLUSH_ERROR":this.logger.error(`Worker flush failed: ${n}`);break;case"QUEUE_SIZE":this.queueSize=s}}setupOnlineListener(){window.addEventListener("online",()=>{this.worker?.postMessage({type:"ONLINE"})}),window.addEventListener("offline",()=>{this.worker?.postMessage({type:"OFFLINE"})})}async send(e){return this.worker?(this.worker.postMessage({type:"TRACK_EVENT",payload:e}),!0):this.sendDirect(e)}async sendDirect(e){try{return(await fetch(this.config.get("apiUrl"),{method:"POST",headers:{"Content-Type":"application/json","X-Tracker-Token":this.config.get("trackerToken")},body:JSON.stringify(e),keepalive:!0})).ok}catch(e){return this.logger.error("Direct send failed:",e),!1}}async flushQueue(){this.worker?.postMessage({type:"FLUSH_QUEUE"})}getQueueSize(){return this.worker?(this.worker.postMessage({type:"GET_QUEUE_SIZE"}),this.queueSize):0}terminate(){this.worker&&(this.worker.terminate(),this.worker=null,this.logger.log("Worker terminated"))}}class a{constructor(e,t,i,n){this.config=e,this.session=t,this.transport=i,this.logger=n,this.sentEvents=new Map}send(e,t={}){if(!this.session.isActive())return void this.logger.error("Cannot send event without active session");const i={event:e,session_id:this.session.getId(),tracker_token:this.config.get("trackerToken"),timestamp:(new Date).toISOString(),...t},n=`${e}_${i.timestamp}_${JSON.stringify(t)}`;this.sentEvents.has(n)?this.logger.warn("Duplicate event prevented:",e):(this.sentEvents.set(n,Date.now()),setTimeout(()=>{this.sentEvents.delete(n)},2e3),this.transport.send(i))}trackCustomEvent(e,t={}){this.send("custom_event",{event_name:e,event_data:t,page_url:"undefined"!=typeof window?window.location.href:null}),this.logger.log("Custom event tracked:",e)}}class h{constructor(e,t,i,n){this.config=e,this.state=t,this.eventTracker=i,this.logger=n,this.timer=null}start(){this.stop();const e=this.config.get("pingInterval");this.timer=setInterval(()=>{const t=e/1e3;this.state.incrementTimeSpent(t),this.ping()},e),this.logger.log(`Ping timer started. Interval: ${e/1e3}s`)}stop(){this.timer&&(clearInterval(this.timer),this.timer=null,this.logger.log("Ping timer stopped"))}ping(){this.eventTracker.send("ping",{time_spent_seconds:this.state.get("timeSpent"),page_url:"undefined"!=typeof window?window.location.href:null,is_visible:"undefined"==typeof document||!document.hidden})}trigger(){this.ping()}isRunning(){return null!==this.timer}}class g{constructor(e,t,i,n){this.config=e,this.state=t,this.eventTracker=i,this.logger=n}track(e){const t="undefined"==typeof window||"undefined"==typeof document?{}:{page_path:window.location.pathname,page_url:window.location.href,page_title:document.title,referrer:document.referrer};e&&(t.page_path=e),this.eventTracker.send("page_view",t),this.state.set("lastPath",t.page_path),this.logger.log("Page view tracked:",t.page_path)}}class l{constructor(e,t,i,n,s,r,o){this.config=e,this.state=t,this.session=i,this.eventTracker=n,this.pingTracker=s,this.pageViewTracker=r,this.logger=o}setup(){"undefined"!=typeof window&&(this.setupUnloadListener(),this.setupVisibilityListener(),this.config.get("autoTrack")&&this.setupNavigationListeners())}setupUnloadListener(){window.addEventListener("beforeunload",()=>{this.pingTracker.stop(),this.eventTracker.send("session_end",{total_time_spent_seconds:this.state.get("timeSpent"),page_url:window.location.href}),this.session.end()})}setupVisibilityListener(){document.addEventListener("visibilitychange",()=>{document.hidden?(this.pingTracker.stop(),this.logger.log("Page hidden, ping timer paused")):(this.pingTracker.start(),this.logger.log("Page visible, ping timer resumed"))})}setupNavigationListeners(){this.state.set("lastPath",window.location.pathname);const e=()=>{const e=window.location.pathname;e!==this.state.get("lastPath")&&this.pageViewTracker.track(e)};window.addEventListener("popstate",e);const t=history.pushState,i=history.replaceState;history.pushState=function(){t.apply(this,arguments),e()},history.replaceState=function(){i.apply(this,arguments),e()},this.logger.log("SPA navigation tracking enabled")}}const u=new class{constructor(){this.logger=new s(!1),this.config=new t,this.state=new i,this.session=null,this.transport=null,this.eventTracker=null,this.pingTracker=null,this.pageViewTracker=null,this.browserListeners=null,this.googleAds=null,this.autoInitAttempted=!1}getScriptConfig(){const e=document.getElementsByTagName("script");let t=null;for(let i of e){const e=i.getAttribute("src");if(e&&(e.includes("carboncut.min.js")||e.includes("carboncut.js"))){t={trackerToken:i.getAttribute("data-token")||i.getAttribute("data-tracker-token"),apiUrl:i.getAttribute("data-api-url")||"http://127.0.0.1:8000/api/v1/events/",debug:"true"===i.getAttribute("data-debug"),domain:i.getAttribute("data-domain")||window.location.hostname,useWorker:"false"!==i.getAttribute("data-use-worker")};break}}return t}autoInit(){if(this.autoInitAttempted||this.isInitializing)return void this.logger.warn("Auto-init already attempted or in progress");this.autoInitAttempted=!0,this.isInitializing=!0;const e=this.getScriptConfig();if(!e||!e.trackerToken)return console.error("CarbonCut: No tracker token found. Add data-token attribute to script tag."),void(this.isInitializing=!1);this.init(e),this.isInitializing=!1}init(e={}){if("undefined"==typeof window||"undefined"==typeof document)return this.logger.error("CarbonCut SDK can only be initialized in a browser environment"),!1;if(this.state.get("isInitialized"))return this.logger.warn("CarbonCut is already initialized"),!1;if(!this.config.init(e))return!1;if(this.logger.setDebug(this.config.get("debug")),this.config.get("respectDoNotTrack")&&"1"===navigator.doNotTrack)return this.logger.warn("Do Not Track is enabled, tracking disabled"),!1;this.session=new n(this.config,this.logger);const t=!1!==this.config.get("useWorker");return t&&"undefined"!=typeof Worker?(this.transport=new o(this.config,this.logger),this.logger.log("Using Web Worker for event processing")):(this.transport=new r(this.config,this.logger),this.logger.log("Using main thread for event processing")),this.eventTracker=new a(this.config,this.session,this.transport,this.logger),this.pingTracker=new h(this.config,this.state,this.eventTracker,this.logger),this.pageViewTracker=new g(this.config,this.state,this.eventTracker,this.logger),this.browserListeners=new l(this.config,this.state,this.session,this.eventTracker,this.pingTracker,this.pageViewTracker,this.logger),this.session.start(),this.eventTracker.send("session_start","undefined"==typeof window||"undefined"==typeof document?{}:{user_agent:navigator.userAgent,screen_resolution:`${window.screen.width}x${window.screen.height}`,viewport_size:`${window.innerWidth}x${window.innerHeight}`,language:navigator.language,timezone:Intl.DateTimeFormat().resolvedOptions().timeZone,referrer:document.referrer||"direct",page_url:window.location.href,page_title:document.title}),this.pingTracker.start(),this.browserListeners.setup(),this.state.set("isInitialized",!0),this.logger.log("CarbonCut SDK initialized successfully",{sessionId:this.session.getId(),trackerToken:this.config.get("trackerToken"),workerEnabled:t}),this.config.get("autoAuth")&&setTimeout(()=>{this.initiateGoogleAdsAuth()},0),!0}trackEvent(e,t={}){this.state.get("isInitialized")?this.eventTracker.trackCustomEvent(e,t):this.logger.error("SDK not initialized. Call init() first")}trackPageView(e){this.state.get("isInitialized")?this.pageViewTracker.track(e):this.logger.error("SDK not initialized. Call init() first")}ping(){this.state.get("isInitialized")?this.pingTracker.trigger():this.logger.error("SDK not initialized. Call init() first")}getSessionInfo(){return{sessionId:this.session?.getId()||null,trackerToken:this.config.get("trackerToken"),timeSpent:this.state.get("timeSpent"),isInitialized:this.state.get("isInitialized"),queueSize:this.transport?.getQueueSize()||0}}enableDebug(){this.logger.setDebug(!0),this.config.set("debug",!0)}disableDebug(){this.logger.setDebug(!1),this.config.set("debug",!1)}destroy(){this.pingTracker?.stop(),this.transport?.terminate?.(),this.session?.end(),this.state.reset(),this.logger.log("SDK destroyed")}};return"undefined"!=typeof document&&("loading"===document.readyState?document.addEventListener("DOMContentLoaded",()=>{u.autoInit()},{once:!0}):u.autoInit()),"undefined"!=typeof module&&module.exports&&(module.exports=u),"undefined"!=typeof window&&(window.CarbonCut=u),u}();
//# sourceMappingURL=carboncut.min.js.map
